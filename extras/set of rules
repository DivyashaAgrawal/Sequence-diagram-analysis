Creating test sequences using EA Diagram:

SparkIT allows you to provide test sequence in the form of sequence diagram apart from using user interface to feed data to the tool


Set of rules for creating Test sequences using EA Diagram(Sequence Diagram): 

    Range of values for input and output variables can be specified using ‘->’ special character.

    Example: for all the example scenario let us consider sum function with two input variables and one expected  output variable i.e. int  Sum(int a , int b);

                   Say if the range for a is 0 to 500 , b is 0 to 500 and c is 0 to 1000 you can specify this using following format:

                   Sum( 0->500 , 0->500 ) : 0->1000


    If you want to specify variables to be any values of expected data type you can indicate it with  ‘ * ’

    Example: Sum( * , * ) : *

     

    If you are fine with output being any positive integer then specify using ‘+’ special character

    Example: Sum( + , + ) : +

    Similarly for negative values you can specify it with ‘-’  

     

    If variables are few known numbers, say just two numbers 0 or 1 , you can specify it using ‘ | ’ special character.

    Example: Sum( 0|1 , 0|1) : 0|1|2

     

    You can also explicitly specify that only one particular value can be fed as input to a function using ‘#<values>’

    Example: if variables are supposed to be 1 always then : Sum( #1 , #1) : #2

     

    If you want to exclude a particular value then you can specify suing ‘ex.<value>’

    Example: say you will never expect the out to be zero under any circumstances then you can indicate it as

    Sum( + , +) : ex.0

     

    If you specify values of the variables directly without following any of the above given rules, then just the sequence is taken into consideration

    The values might be omitted.(depends on AI logic)


    If you want to restrict length of the variable say variables like array , vector or string you can specify this using '[<length>]'

           Example:Consider function  void setName(string str); , if you to restrict the length of string to 3 you can specify it in this format

                             setName([3]):


    Signals or events should be pefixed with "sig." to differentiate them from methods

          Example: Consider an event or signal with name WifiConnectStatus, and the expected datatype of Asynchronous signal value is int (indicated within brackets) and signal return is is bool

                           then it can be indicated as :     sig.WifiConnectStatus (*): *


    If output of a function1 acts as input to another function say function2, then you can specify it as function2(&<function1>)

         Example: consider sum function if out of sum function acts as input for int square(int);

                         then you can specify it as square(&sum):*


    Consider if the variable is a structure, and if you wish to specify the values explicitly then you can provide values as <val1,val2,val3....>

          Example: consider if the input of function sum is a structure, say structure val which has two integer variables val1 and val2 i.e. int sum(val a);

                         then it can be specified as sum(<#1 , #1>) : #2

          Note: we recommend you to use '*' instead of using the above mentioned method and let SparkIT generate values for you , unless it is necessary 


    A single test sequence per page of pdf .

    Name of the test sequence should be name of the pdf file (since we will tag test sequences, try to provide a valid name . Avoid using method name as test block name )

    Name of the component should be in the same format as mentioned in your interface file

    If a test block acts as a precondition for another test block it can specified with '&TB.' 

          Example:if testblock1 acts as precondition for testblock2  which has a single api sum then it can be specified as  
          

    Provide adequate spacing between words to improve readability.

     

     Similarly you can come up with new rule which can be integrated with our framework after discussing its possibility.


A sample image of sequence diagram :

Note that this diagram does not follow any of the listed rules , so there is a good  chance that the values might be omitted but the sequence is preserved

 

Try to preserve the same structure as in sample diagram 
